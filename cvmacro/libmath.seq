ver no
chk yes

gbl num ^g_roundf_threshold ^g_infty ^g_minus_infty
^g_roundf_threshold == 0.4999999999999999 ! arg max roundf(x) = 0
^g_infty == 1e18
^g_minus_infty == -1e18

fct @floor(num ^x)
	lcl num ^y
	if ^x >= 0 and ^x < 1
		^y == 0
	else
		^y == roundf(^x-0.5)
	end if
end fct ^y

fct @ceil(num ^x)
end fct @floor(^x)+1

fct @fix(num ^x) ! round towards origo
	lcl num ^y
	if ^x > 0
		^y == @floor(^x)
	else 
		^y == @ceil(^x)
	end if
end fct ^y

fct @round(num ^x, num ^digits) ! digits after decimal, 0 = integer
	lcl num ^y
	^y == 10**-^digits*roundf(^x*10**^digits)
end fct ^y

fct @float_exp(num ^x)
	lcl num ^e
	if ^x = 0
		^e == ^g_minus_infty ! for proper asymptotics
	else
		^e == @floor(log10f(absf(^x)))
	end if
end fct ^e

fct @float_mantissa(num ^x, num ^e)
end fct ^x/10**^e

FCT @chebyshev_nodes(num ^nodes(16), num ^n, num ^a, num ^b)
	num ^i
	for ^i 1 ^n
		^nodes(^i) ==  0.5*(^a+^b) + 0.5*(^b-^a)*COSF((^i - 0.5)*3.1415926/^n)
	end for
END FCT 0

FCT @heaviside(num ^x) ! Heaviside step function
	num ^y
	if ^x > 0
		^y == 1
	else 
		^y == 0
	end if
END FCT ^y

fct @interpolate_linear(num ^x1, num ^x2, num ^y1, num ^y2, num ^x)
	num ^x_rel ^y
	^x_rel == (^x - ^x1)/(^x2 - ^x1)
	^y == ^y1 + (^y2 - ^y1)*^x_rel
end fct ^y

fct @erf_opgt(num ^x, num ^x_min)
	num ^erf
	if ^x > ^x_min
		^erf == 0
	else 
		^erf == ^x_min - ^x
	end if
end fct ^erf*^erf

fct @erf_oplt(num ^x, num ^x_max)
	num ^erf
	if ^x < ^x_max
		^erf == 0
	else 
		^erf == ^x - ^x_max
	end if
end fct ^erf*^erf

chk no
ver yes